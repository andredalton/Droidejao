#!/usr/bin/perl

use utf8;
use Text::Unidecode;
use HTML::Strip;

$hs = HTML::Strip->new();
@days = ("SEGUNDA-FEIRA", "TERCA-FEIRA", "QUARTA-FEIRA", "QUINTA-FEIRA", "SEXTA-FEIRA", "SABADO", "DOMINGO");

%url = ("central" => "http://www.usp.br/coseas/cardapio.html",
        "fisica"  => "http://www.usp.br/coseas/cardapiofisica.html",
        "quimica" => "http://www.usp.br/coseas/cardapioquimica.html",
        "pco"     => "http://www.usp.br/coseas/cardcocesp.html");

`mkdir droidejao 2> /dev/null`;

foreach $bandex(keys %url)
{
    $old_hash = "";
    $hash = "";

    `mkdir droidejao/$bandex 2> /dev/null`;
    `mkdir droidejao/$bandex/almoco 2> /dev/null`;
    `mkdir droidejao/$bandex/janta 2> /dev/null`;
    `rm -rf droidejao/$bandex/almoco/*`;
    `rm -rf droidejao/$bandex/janta/*`;

    if (-e "droidejao/$bandex/hash") {
        open (OLD_HASH, '<', "droidejao/$bandex/hash") or die $!;
        $old_hash = <OLD_HASH>;
        close OLD_HASH;
        print "- $old_hash";
    }
    
    $hash = qx(wget -O - $url{$bandex} 2>/dev/null | md5sum);
    print "+ $hash";
    if ($hash eq $old_hash) {
        print ": $bandex nao atualizado.\n\n";
        $hash = "";
        next;
    }
    open (OLD_HASH, '>', "droidejao/$bandex/hash") or die $!;    
    print OLD_HASH $hash;
    close OLD_HASH;
        
    $_ = qx(wget -O - $url{$bandex} 2>/dev/null);
    $clean_text = unidecode($hs->parse($_));
    $hs->eof;
    
    $clean_text =~ s/ +$//g;
    $clean_text =~ s/ +/ /g;
    $clean_text =~ s/^ +//g;
    $clean_text =~ s/\n +/\n/g;
    
    $clean_text =~ s/\n\n+/NEWLINE/g;
    $clean_text =~ s/\n/ /g;
    $clean_text =~ s/NEWLINE/\n/g;
    $clean_text =~ s/ +/ /g;
    $clean_text =~ s/\n +/\n/g;
    
    @lines = unidecode(split(/\n/, $clean_text));
    for $i (0..$#lines) {
        if (grep {$_ eq $lines[$i]} @days) {
            $dia = lc($lines[$i]);
            if (not -e "droidejao/$bandex/almoco/$dia") {
                open (FILE, ">droidejao/$bandex/almoco/$dia") or die $!;
            } else {
                open (FILE, ">droidejao/$bandex/janta/$dia") or die $!;
            } 
            @cardapio = get_cardapio(@lines, $i);
            print_cardapio(@cardapio, FILE);
            close FILE;
        }
    }
    for $dia (@days) {
        $dia_lc = lc($dia);
        `touch droidejao/$bandex/almoco/$dia_lc`;
        `touch droidejao/$bandex/janta/$dia_lc`;
    }
    print ": $bandex atualizado.\n\n";
   `date --date="next monday" +%s > droidejao/${bandex}/timestamp`;
}

sub get_cardapio(@lines, $i)   
{
    my $day = 0;
    my @card = [];
    while (not ($lines[$i] =~ /kcal/)) {
        if (grep {$_ eq $lines[$i]} @days) {
            if ($day) {
                return @card;
            }
            $day++;
        } else {
            push @card, $lines[$i];
        }
        ++$i;
        return [] if not $lines[$i];
    }
    return @card;
}

sub print_cardapio(@cardapio, FILE)
{
    for $item (@cardapio) {
        print FILE "$item\n" unless (ref($item) eq "ARRAY");
    }
}

